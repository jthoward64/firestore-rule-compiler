{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/tajetaje/firestore-rule-compiler/main/src/lib/defs.json",
  "definitions": {
    "match": {
      "type": "object",
      "properties": {
        "collectionPath": {
          "type": "string",
          "description": "The slash separated path to the field, e.g. \"collection/document/sub-collection\", no leading or trailing slashes"
        },
        "documentName": {
          "type": "string",
          "description": "The name of the document at the end of the collection, i.e. \"uid\""
        },
        "isWildCard": {
          "type": "boolean",
          "default": false,
          "nullable": true,
          "description": "Should the document be interpreted as a wildcard?"
        },
        "isWildCardRecursive": {
          "type": "boolean",
          "default": false,
          "nullable": true,
          "description": "Should the wildcard be followed by \"=**\", allows the document to be located in a subcolleciton, has no effect if isWildCard is false"
        },
        "allowRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/allowRule"
          },
          "nullable": true,
          "description": "The logical rules to apply to the field"
        },
        "structureRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/structureRule"
          },
          "description": "The type-based rules to apply to the field"
        },
        "isStructureExclusive": {
          "type": "boolean",
          "default": false,
          "nullable": true,
          "description": "Should any fields not specified in the structure be disallowed?"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#"
          },
          "nullable": true,
          "description": "Child matches"
        }
      },
      "required": [
        "collectionPath",
        "documentName"
      ]
    },
    "structureRule": {
      "type": "object",
      "required": [
        "field",
        "type"
      ],
      "properties": {
        "field": {
          "type": "string",
          "description": "The name of the field to check"
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "bool",
              "bytes",
              "float",
              "int",
              "list",
              "latlong",
              "number",
              "path",
              "array",
              "map",
              "string"
            ]
          },
          "description": "The allowed types for the field\nIf type is not specified, just make sure the field exists and ignore type (results in no effect to update)"
        },
        "required": {
          "type": "boolean",
          "nullable": true,
          "description": "Is the field required?"
        }
      }
    },
    "allowRule": {
      "type": "object",
      "required": [
        "methods"
      ],
      "properties": {
        "methods": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "get",
              "list",
              "create",
              "update",
              "delete"
            ]
          },
          "description": "The methods to allow if the conditions are met"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": [
              "string",
              "object"
            ],
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/condition"
              }
            ]
          },
          "nullable": true,
          "description": "A list of conditions that must be met for the rule to be allowed, joined by \"&&\""
        },
        "requireAuth": {
          "type": "boolean",
          "nullable": true,
          "description": "If true adds \"request.auth != null\" to the condition"
        },
        "requiredClaims": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The claim to check"
              },
              "value": {
                "type": [
                  "string",
                  "number",
                  "boolean"
                ],
                "nullable": true,
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "The value to check against"
              }
            }
          },
          "nullable": true,
          "description": "Adds a rule for each claim, if value is set for the claim, adds \"request.auth.token.${name} == ${value}\" to the condition, otherwise adds \"request.auth.token.${name} != null\""
        }
      }
    },
    "condition": {
      "type": "object",
      "properties": {
        "fieldA": {
          "type": [
            "string",
            "object"
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/field"
            }
          ],
          "description": "The lefthand field to compare, can be a field object, or a string that is taken literally"
        },
        "comparator": {
          "type": "string",
          "enum": [
            "<",
            "<=",
            "==",
            "!=",
            ">=",
            ">",
            "in",
            "is",
            "&&",
            "||"
          ],
          "description": "The comparator to put between the two fields"
        },
        "fieldB": {
          "type": [
            "string",
            "object"
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/field"
            }
          ],
          "description": "The righthand field to compare, can be a field object, or a string that is taken literally"
        },
        "isInverted": {
          "type": "boolean",
          "default": false,
          "nullable": true,
          "description": "Should the expression be preceded by \"!\""
        }
      },
      "required": [
        "fieldA",
        "comparator",
        "fieldB"
      ]
    },
    "field": {
      "type": "object",
      "properties": {
        "fieldA": {
          "type": [
            "string",
            "object"
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/field"
            }
          ],
          "description": "The lefthand field to compare, can be a field object, or a string that is taken literally"
        },
        "comparator": {
          "type": "string",
          "enum": [
            "<",
            "<=",
            "==",
            "!=",
            ">=",
            ">",
            "in",
            "is",
            "+",
            "-",
            "*",
            "/",
            "%",
            "&&",
            "||"
          ],
          "description": "The comparator to put between the two fields"
        },
        "fieldB": {
          "type": [
            "string",
            "object"
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/field"
            }
          ],
          "description": "The righthand field to compare, can be a field object, or a string that is taken literally"
        }
      },
      "required": [
        "fieldA",
        "comparator",
        "fieldB"
      ]
    }
  }
}